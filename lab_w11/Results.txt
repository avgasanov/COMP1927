Results for Tests on 5000 values

Depth = depth of tree, Cost = average #comparisons per search


             Ascending Order        Prefix Order        Random Order
Insert
Method       Depth      Cost     Depth      Cost     Depth      Cost

L             5000   3114.47	      13     11.75	   28	   15.95

A             5000   1886.53      2954   1115.11	   28	   16.29
   
R             2492    951.50      1774    674.10        27     15.15

B              204     61.96        20     13.66        23     13.02

S               33     23.61        29     23.09      1146     22.68

V               13     11.78        14     12.10        15     11.79


Notes (what the above indicates):

Overall, it can be observed that a high tree depth is associated with a higher cost. This would be expected as node traversal depends on tree depth.

Standard Insertion (L) - ASCENDING
- Create a list with only one branch per node, hence a high depth number.
Standard Insertion (L) - PREFIX
- Prefix will create a balanced tree

Insertion at root (A) - ASCENDING
- Once branch per node again, high depth number.
Insertion at root (A) - PREFIX
- Bad combination

Random insertion via. L+A (R) - ASCENDING and PREFIX
- Both standard insertion and insertion at root are not well balanced
for ascending order, so randomly choosing either would have the same result.

Insertion at leaves w/ rebalancing (B) - ASCENDING
- Improvement in balancing the tree with the periodic rebalancing.
Insertion at leaves w/ rebalancing (B) - PREFIX
- Creates a well balanced tree with periodic rebalancing.

Splay Tree insertion (S) - ASCENDING and PREFIX
- Tree is more balanced for random queries as most nodes would be moved to the root.

AVL Approach (V) - ASCENDING and PREFIX
- Low tree depth and cost overall, as it is self-balancing.

Random insertion order seems to be the best option in producing a balanced tree, as each item of data is not correlated, thus has a lower chance of building a list-like structure.


